{"version":3,"sources":["constants.js","utils.js","components/FlightsHead.js","components/FlightsRow.js","components/FlightsBody.js","components/FlightsButtons.js","App.js","serviceWorker.js","index.js"],"names":["FLIGHT_TYPES","DEPARTURE","ARRIVAL","createFlightMapper","type","flightItem","base","id","ID","terminal","term","airline","en","name","flightNumber","codeShareData","codeShare","Object","objectSpread","gate","gateNo","time","concat","timeNormilize","timeDepShedule","destination","status","statusDecoder","timeDepFact","timeArrShedule","timeTakeofFact","timeStr","match","code","FlightsHead","props","currRender","react_default","a","createElement","className","FlightsRow","_props$data","data","FlightsBody","rows","map","flightInfo","key","FlightsButtons","toggler","onClick","e","preventDefault","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","depatrure","arrival","loaded","currDate","Date","toggleRender","bind","assertThisInitialized","setState","_this2","dateNowNormilize","date","monthDay","getDate","toString","padStart","month","getMonth","year","getFullYear","createDateString","url","fetch","then","response","json","_data$body","body","departure","departures","arrivals","getFlightsFromApi","_this$state","changeDay","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TACaA,EAAe,CAC1BC,UAAW,YACXC,QAAS,kBCDJ,SAASC,EAAmBC,GAAM,IAC/BH,EAAuBD,EAAvBC,UAAWC,EAAYF,EAAZE,QAEnB,OAAO,SAAAG,GACL,IAAMC,EAAO,CACXC,GAAIF,EAAWG,GACfC,SAAUJ,EAAWK,KACrBC,QACEN,EAAWM,SACXN,EAAWM,QAAQC,IACnBP,EAAWM,QAAQC,GAAGC,KACxBC,aACET,EAAWU,eACXV,EAAWU,cAAc,IACzBV,EAAWU,cAAc,GAAGC,WAEhC,OAAQZ,GACN,KAAKH,EACH,OAAOgB,OAAAC,EAAA,EAAAD,CAAA,GACFX,EADL,CAEEa,KAAMd,EAAWe,OACjBC,KAAI,GAAAC,OAAKC,EAAclB,EAAWmB,iBAClCC,YAAapB,EAAW,uBACxBqB,OAAM,GAAAJ,OAAKK,EAActB,EAAWqB,QAA9B,KAAAJ,OAAyCC,EAC7ClB,EAAWuB,gBAGjB,KAAK1B,EACH,OAAOe,OAAAC,EAAA,EAAAD,CAAA,GACFX,EADL,CAEEe,KAAI,GAAAC,OAAKC,EAAclB,EAAWwB,iBAClCJ,YAAapB,EAAW,yBACxBqB,OAAM,GAAAJ,OAAKK,EAActB,EAAWqB,QAA9B,KAAAJ,OAAyCC,EAC7ClB,EAAWyB,qBAkBvB,SAASP,EAAcQ,GACrB,MAAuB,kBAAZA,EACF,GAEFA,EAAQC,MAAM,eAGvB,SAASL,EAAcM,GACrB,OAAQA,GACN,IAAK,KACH,MAAO,UACT,IAAK,KACH,MAAO,SACT,IAAK,KACH,MAAO,WACT,IAAK,KACH,MAAO,cACT,IAAK,KACH,MAAO,YACT,QACE,MAAO,WCrEE,SAASC,EAAYC,GAAO,IACjClC,EAAcD,EAAdC,UACAmC,EAAeD,EAAfC,WAER,OACEC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,YACCJ,IAAenC,GACdoC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,QACFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,kBCdO,SAASC,EAAWN,GAAO,IAChClC,EAAcD,EAAdC,UADgCyC,EAUpCP,EAAMQ,KAPRlC,EAHsCiC,EAGtCjC,SACAU,EAJsCuB,EAItCvB,KACAE,EALsCqB,EAKtCrB,KACAI,EANsCiB,EAMtCjB,YACAC,EAPsCgB,EAOtChB,OACAf,EARsC+B,EAQtC/B,QACAG,EATsC4B,EAStC5B,aAGMsB,EAAeD,EAAfC,WAER,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BAA6BH,EAAAC,EAAAC,cAAA,SAAI9B,IAC9C2B,IAAgBnC,GACfoC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAA2BrB,GAAQ,KACnDkB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAA0BnB,GACxCgB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCf,GAC/CY,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BAA4Bd,GAC1CW,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAA6B7B,GAC3C0B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BAA4B1B,ICtBjC,SAAS8B,EAAYT,GAAO,IACjCC,EAAoBD,EAApBC,WACFS,EADsBV,EAARQ,KACFG,IAAI,SAAAC,GAAU,OAAIV,EAAAC,EAAAC,cAACE,EAAD,CACEE,KAAMI,EACNX,WAAYA,EACZY,IAAKD,EAAWxC,OAGtD,OACE8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAACL,EAAD,CAAaE,WAAYA,IACzBC,EAAAC,EAAAC,cAAA,aACGM,WCbI,SAASI,EAAed,GAAO,IACpClC,EAAuBD,EAAvBC,UAAWC,EAAYF,EAAZE,QACXgD,EAAwBf,EAAxBe,QAASd,EAAeD,EAAfC,WAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAWJ,IAAenC,EACtB,oCAAsC,6BAC1CkD,QAAS,SAACC,GACRA,EAAEC,iBACFH,EAAQjD,IAEVG,KAAK,UAPP,aAWAiC,EAAAC,EAAAC,cAAA,UACEC,UAAWJ,IAAelC,EACtB,kCAAoC,2BACxCiD,QAAS,SAACC,GACRA,EAAEC,iBACFH,EAAQhD,IAEVE,KAAK,UAPP,sBCfEH,EAAuBD,EAAvBC,UAAWC,EAAYF,EAAZE,QAEEoD,cACnB,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAAwC,KAAAH,IACjBC,EAAAtC,OAAAyC,EAAA,EAAAzC,CAAAwC,KAAAxC,OAAA0C,EAAA,EAAA1C,CAAAqC,GAAAM,KAAAH,KAAMtB,KACD0B,MAAQ,CACXC,UAAW,GACXC,QAAS,GACTC,QAAQ,EACR5B,WAAYnC,EACZgE,SAAU,IAAIC,MAGhBX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBnD,OAAAoD,EAAA,EAAApD,CAAAsC,IAVHA,4EAcNnD,GAAM,IACTgC,EAAeqB,KAAKI,MAApBzB,WAEJhC,IAASH,GACRmC,IAAenC,GAClBwD,KAAKa,SAAS,CACZlC,WAAYnC,IAIZG,IAASF,GACRkC,IAAelC,GAClBuD,KAAKa,SAAS,CACZlC,WAAYlC,gDAME,IAAAqE,EAAAd,KAEZe,ELHH,SAA0BC,GAC/B,IAAMC,EAAWD,EACdE,UACAC,WACAC,SAAS,EAAG,KACTC,GAASL,EAAKM,WAAa,GAAGH,WAAWC,SAAS,EAAG,KACrDG,EAAOP,EAAKQ,cAElB,SAAA3D,OAAUoD,EAAV,KAAApD,OAAsBwD,EAAtB,KAAAxD,OAA+B0D,GKLJE,CADJzB,KAAKI,MAAlBI,UAEFkB,EAAG,GAAA7D,ON9Ce,qCM8CfA,OAAqBkD,GAE9BY,MAAMD,GACHE,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAC1C,GAAS,IAAA6C,EACiB7C,EAAK8C,KAA5BC,EADMF,EACNE,UAAW3B,EADLyB,EACKzB,QACb4B,EAAaD,EAAU5C,IAAI3C,EAAmBF,IAC9C2F,EAAW7B,EAAQjB,IAAI3C,EAAmBD,IAEhDqE,EAAKD,SAAS,CACZoB,UAAWC,EACX5B,QAAS6B,EACT5B,QAAQ,kDAMdP,KAAKoC,qDAGE,IAAAC,EAMHrC,KAAKI,MAJPG,EAFK8B,EAEL9B,OACA0B,EAHKI,EAGLJ,UACA3B,EAJK+B,EAIL/B,QACA3B,EALK0D,EAKL1D,WAGF,OAAK4B,EAQC3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACU,EAAD,CAAgBC,QAASO,KAAKU,aAAc/B,WAAYA,KAE1DC,EAAAC,EAAAC,cAACK,EAAD,CAAaR,WAAYA,EACvBO,KAAMP,IAAenC,EACjByF,EAAY3B,EAChBgC,UAAWtC,KAAKsC,aAbtB1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBArEQwD,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpE,MAC1B,2DCZNqE,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAACwB,GAClCA,EAAaC","file":"static/js/main.8ff25df6.chunk.js","sourcesContent":["export const BASE_URL_API = 'https://api.iev.aero/api/flights/';\r\nexport const FLIGHT_TYPES = {\r\n  DEPARTURE: 'departure',\r\n  ARRIVAL: 'arrival',\r\n}\r\n","import { FLIGHT_TYPES } from './constants';\r\n\r\nexport function createFlightMapper(type) {\r\n  const { DEPARTURE, ARRIVAL } = FLIGHT_TYPES;\r\n\r\n  return flightItem => {\r\n    const base = {\r\n      id: flightItem.ID,\r\n      terminal: flightItem.term,\r\n      airline:\r\n        flightItem.airline &&\r\n        flightItem.airline.en &&\r\n        flightItem.airline.en.name,\r\n      flightNumber:\r\n        flightItem.codeShareData &&\r\n        flightItem.codeShareData[0] &&\r\n        flightItem.codeShareData[0].codeShare\r\n    };\r\n    switch (type) {\r\n      case DEPARTURE:\r\n        return {\r\n          ...base,\r\n          gate: flightItem.gateNo,\r\n          time: `${timeNormilize(flightItem.timeDepShedule)}`,\r\n          destination: flightItem['airportToID.name_en'],\r\n          status: `${statusDecoder(flightItem.status)} ${timeNormilize(\r\n            flightItem.timeDepFact\r\n          )}`\r\n        };\r\n      case ARRIVAL:\r\n        return {\r\n          ...base,\r\n          time: `${timeNormilize(flightItem.timeArrShedule)}`,\r\n          destination: flightItem['airportFromID.name_en'],\r\n          status: `${statusDecoder(flightItem.status)} ${timeNormilize(\r\n            flightItem.timeTakeofFact\r\n          )}`\r\n        };\r\n    }\r\n  };\r\n}\r\n\r\nexport function createDateString(date) {\r\n  const monthDay = date\r\n    .getDate()\r\n    .toString()\r\n    .padStart(2, '0');\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n  const year = date.getFullYear();\r\n\r\n  return `${monthDay}-${month}-${year}`;\r\n}\r\n\r\nfunction timeNormilize(timeStr) {\r\n  if (typeof timeStr !== 'string') {\r\n    return ''\r\n  }\r\n  return timeStr.match(/\\d{2}:\\d{2}/);\r\n}\r\n\r\nfunction statusDecoder(code) {\r\n  switch (code) {\r\n    case 'ON':\r\n      return 'On time';\r\n    case 'LN':\r\n      return 'Landed';\r\n    case 'CX':\r\n      return 'Canceled';\r\n    case 'DP':\r\n      return 'Departed at';\r\n    case 'CK':\r\n      return 'Check -in';\r\n    default:\r\n      return '-';\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { FLIGHT_TYPES } from '../constants';\r\nimport './flightsHead.css'\r\n\r\nexport default function FlightsHead(props) {\r\n  const { DEPARTURE } = FLIGHT_TYPES;\r\n  const { currRender } = props;\r\n\r\n  return (\r\n    <thead className=\"flights-body__head\">\r\n      <tr>\r\n        <th className=\"flights-body__head-info\">terminal</th>\r\n        {currRender === DEPARTURE &&\r\n          <th className=\"flights-body__head-info\">gate</th>}\r\n        <th className=\"flights-body__head-info\">local time</th>\r\n        <th className=\"flights-body__head-info\">destination</th>\r\n        <th className=\"flights-body__head-info\">status</th>\r\n        <th className=\"flights-body__head-info\">airline</th>\r\n        <th className=\"flights-body__head-info\">flight</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { FLIGHT_TYPES } from '../constants';\r\nimport './flightsRow.css'\r\n\r\nexport default function FlightsRow(props) {\r\n  const { DEPARTURE } = FLIGHT_TYPES;\r\n  const { \r\n    terminal,\r\n    gate,\r\n    time,\r\n    destination,\r\n    status,\r\n    airline,\r\n    flightNumber,\r\n  } = props.data;\r\n\r\n  const { currRender } = props;\r\n\r\n  return (\r\n    <tr className=\"flights-body__row\">\r\n      <td className=\"flights-body__row-terminal\"><p>{terminal}</p></td>\r\n      {currRender ===  DEPARTURE &&\r\n        <td className=\"flights-body__row-ggate\">{gate || '-'}</td>}\r\n      <td className=\"flights-body__row-time\">{time}</td>\r\n      <td className=\"flights-body__row-destination\">{destination}</td>\r\n      <td className=\"flights-body__row-status\">{status}</td>\r\n      <td className=\"flights-body__row-airline\">{airline}</td>\r\n      <td className=\"flights-body__row-flight\">{flightNumber}</td>\r\n    </tr>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FlightsHead from './FlightsHead';\r\nimport FlightsRow from './FlightsRow';\r\n\r\nexport default function FlightsBody(props) {\r\n  const { currRender, data} = props;\r\n  const rows = data.map(flightInfo => <FlightsRow \r\n                                        data={flightInfo} \r\n                                        currRender={currRender} \r\n                                        key={flightInfo.id} \r\n                                      />);\r\n\r\n  return (\r\n    <div className=\"flights-body\">\r\n      <table>\r\n        <FlightsHead currRender={currRender} />\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nFlightsBody.propTypes = {\r\n  currRender: PropTypes.string,\r\n  data: PropTypes.array,\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FLIGHT_TYPES } from '../constants';\r\nimport './flightButtons.css'\r\n\r\nexport default function FlightsButtons(props) {\r\n  const { DEPARTURE, ARRIVAL } = FLIGHT_TYPES;\r\n  const { toggler, currRender } = props;\r\n\r\n  return (\r\n    <div className=\"flights-buttons\">\r\n      <button\r\n        className={currRender === DEPARTURE \r\n          ? \"flights-buttons__departure active\" : \"flights-buttons__departure\"}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          toggler(DEPARTURE);\r\n        }}\r\n        type='button'\r\n      >\r\n        departure\r\n      </button>\r\n      <button\r\n        className={currRender === ARRIVAL\r\n          ? \"flights-buttons__arrival active\" : \"flights-buttons__arrival\"}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          toggler(ARRIVAL);\r\n        }}\r\n        type='button'\r\n      >\r\n        arrival\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nFlightsButtons.propTypes = {\r\n  toggler: PropTypes.func,\r\n  currRender: PropTypes.string,\r\n}","import React, { Component } from 'react';\r\nimport { FLIGHT_TYPES, BASE_URL_API } from './constants';\r\nimport { createFlightMapper, createDateString } from './utils';\r\nimport FlightsBody from './components/FlightsBody';\r\nimport FlightsButtons from './components/FlightsButtons';\r\nimport './App.css';\r\n\r\nconst { DEPARTURE, ARRIVAL } = FLIGHT_TYPES;\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      depatrure: [],\r\n      arrival: [],\r\n      loaded: false,\r\n      currRender: DEPARTURE,\r\n      currDate: new Date(),\r\n    }\r\n\r\n    this.toggleRender = this.toggleRender.bind(this);\r\n    \r\n  }\r\n\r\n  toggleRender(type) {\r\n    const { currRender } = this.state;\r\n    \r\n    if (type === DEPARTURE \r\n      && currRender !== DEPARTURE) {\r\n      this.setState({\r\n        currRender: DEPARTURE\r\n      })\r\n    }\r\n\r\n    if (type === ARRIVAL \r\n      && currRender !== ARRIVAL) {\r\n      this.setState({\r\n        currRender: ARRIVAL\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  getFlightsFromApi() {\r\n    const { currDate } = this.state;\r\n    const dateNowNormilize = createDateString(currDate);\r\n    const url = `${BASE_URL_API}${dateNowNormilize}`;\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const { departure, arrival } = data.body;\r\n        const departures = departure.map(createFlightMapper(DEPARTURE));\r\n        const arrivals = arrival.map(createFlightMapper(ARRIVAL));\r\n\r\n        this.setState({\r\n          departure: departures,\r\n          arrival: arrivals,\r\n          loaded: true,\r\n        })\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFlightsFromApi();\r\n  }\r\n\r\n  render() {\r\n    const { \r\n      loaded,\r\n      departure,\r\n      arrival,\r\n      currRender\r\n    } = this.state;\r\n    \r\n    if (!loaded) {\r\n      return (\r\n        <div className=\"loader\">\r\n          <div className=\"load\"></div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n          <div className=\"wrapper\">\r\n            <div className=\"buttons\">\r\n              <FlightsButtons toggler={this.toggleRender} currRender={currRender} />\r\n            </div>\r\n            <FlightsBody currRender={currRender}\r\n              data={currRender === DEPARTURE\r\n                ? departure : arrival}\r\n              changeDay={this.changeDay}\r\n            />\r\n          </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}